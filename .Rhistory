usethis::use_vignette("DMDS3")
library(Rcpp)
library(devtools)
compileAttributes()
build()
install(build_vignettes = TRUE)
library(DSDM3)
library(DSDM3)
library(tidyverse)
library(ggplot2)
library(xtable)
library(gridExtra)
library(kableExtra)
data(resultMod)
data("resultMod_vig.rds")
usethis::use_data( "resultMod_vig.rds" )
resultMod <- usethis::use_data( "resultMod_vig.rds" )
resultMod_vig <- readRDS("~/Desktop/Github - Repo/DSDM3/data/resultMod_vig.rds")
rm(list = ls())
load("resultMod_vig.rds")
resultApp_vig <- readRDS("~/Desktop/Github - Repo/DSDM3/data/resultApp_vig.rds")
save(resultApp_vig, file = "/Users/kevin-imac/resultApp_vig.rda")
resultMod_vig <- readRDS("~/Desktop/Github - Repo/DSDM3/data/resultMod_vig.rds")
save(resultMod_vig, file = "/Users/kevin-imac/resultMod_vig.rda")
rm(list = ls())
uninstall(); compileAttributes(); build(); install(build_Vignettes = TRUE)
compileAttributes(); build(); install(build_Vignettes = TRUE)
uninstall(); compileAttributes(); build(); install(build_vignettes = TRUE)
library(DSDM3)
data("resultMod_vig")
resultMod <- resultMod_vig
rm(resultMod_vig)
data("resultMod_vig")
resultMod <- resultMod_vig
rm(resultMod_vig)
### Obtain a vector of the final cluster assignment.
clusResult <- finalCLUS( resultMod, burn_in = 500, seed = 1 )
### Obtain a vector of the number of active cluster for each MCMC iteration.
clusMCMC <- uniqueCLUS( resultMod )
### Create the plot for the active cluster via MCMC iteration
data.frame(clusMCMC, iter = 1:1500) %>%
ggplot(aes(x = iter, y = clusMCMC)) +
geom_line() +
scale_y_continuous(breaks = seq(2, 10, 2), limits = c(1, 10)) +
theme_bw() +
labs(x = "MCMC Iteration", y = "Number of Active Cluster")
### Calculate the ARI
ariCLUS( clusResult, simDat$c )
### Simulate the data
simDat <- sim_clusDat( N = 100, Jnoise = 150, Jsignal = 50, pZero = 0.35,
ZSumNoise = 12500, ZSumSignal = 2500, seed = 1)
### Calculate the ARI
ariCLUS( clusResult, simDat$c )
#> 1
clusResult
table(clusResult, simDat$c)
table(Model = clusResult, Actual = simDat$c)
table(Model = clusResult, Actual = simDat$c) %>% xtable()
### Result table
table(Model = clusResult, Actual = simDat$c) %>%
xtable(caption = "Example of the metadata for the HIV dataset. The first column contains the observation ID, while the other two columns represent the metadata for each individual: sexual behavior and HIV infection status, respectively.") %>%
xtable2kable()
### Result table
table(Model = clusResult, Actual = simDat$c) %>%
xtable(caption = "Simulation Results: Confusion matrix showing the number of observations classified by the truth and the resulting cluster.") %>%
xtable2kable()
### Confusion Matrix
table(Model = clusResult, Actual = simDat$c)
### Confusion Matrix
data.frame(table(Model = clusResult, Actual = simDat$c))
table(Model = paste0("Model: Cluster ", clusResult), Actual = simDat$c) %>%
xtable(caption = "Simulation Results: Confusion matrix displaying the classification of observations based on actual clusters (rows) and resulting clusters (columns). Each row corresponds to the true cluster, while each column represents the assigned cluster label.") %>%
xtable2kable()
### Confusion Matrix
table(Model = paste0("Model: Cluster ", clusResult),
Actual = paste0("Truth: Cluster ", simDat$c)) %>%
xtable(caption = "Simulation Results: Confusion matrix displaying the classification of observations based on actual clusters (rows) and resulting clusters (columns). Each row corresponds to the true cluster, while each column represents the assigned cluster label.") %>%
xtable2kable()
HIVMod <- data("resultApp_vig")
data("resultApp_vig")
HIVMod
HIVMod <- HIVMod$mod
HIVMod <- resultApp_vig$mod
rm(resultApp_vig)
```{r, echo = FALSE, message=FALSE}
- `shuffle`: Determines whether the order of observations should be shuffled. The default is `TRUE`. If set to `FALSE`, observations from the same cluster will be grouped together in the data set.
sessionInfo()
library(RcppArmadillo)
sessionInfo()
